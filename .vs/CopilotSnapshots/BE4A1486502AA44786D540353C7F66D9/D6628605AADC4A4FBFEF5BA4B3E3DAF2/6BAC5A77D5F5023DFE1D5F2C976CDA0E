#include "UIManager.h"
#include "../Scene/InteriorObject.h"
#include "../Graphics/ModelLoader.h"
#include "../Components/Transform.h"
#include "../Character/Character.h"

#include <iostream>

namespace visualnnz
{
using namespace std;
using namespace DirectX::SimpleMath;

UIManager::UIManager()
{
    m_modelLoader = make_shared<ModelLoader>();
    InitializeObjectItems();
    
    // 테스트를 위해 데모 윈도우 활성화
    m_showDemo = true;
    
    cout << "UIManager constructor completed" << endl;
}

UIManager::~UIManager() = default;

bool UIManager::Initialize(HWND hWnd, ComPtr<ID3D11Device> device, ComPtr<ID3D11DeviceContext> context)
{
    cout << "UIManager::Initialize starting..." << endl;
    
    // ImGui 초기화
    IMGUI_CHECKVERSION();
    ImGui::CreateContext();
    ImGuiIO& io = ImGui::GetIO(); (void)io;
    io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;

    // ImGui 스타일 설정
    ImGui::StyleColorsDark();

    // 한국어 폰트 설정 (임시로 기본 폰트 사용)
    io.Fonts->AddFontDefault();

    // Platform/Renderer 백엔드 초기화
    if (!ImGui_ImplWin32_Init(hWnd))
    {
        cout << "Failed to initialize ImGui Win32!" << endl;
        return false;
    }

    if (!ImGui_ImplDX11_Init(device.Get(), context.Get()))
    {
        cout << "Failed to initialize ImGui DX11!" << endl;
        return false;
    }

    // 모델 파일들 목록 로드
    m_availableModels = m_modelLoader->GetAvailableModels();
    
    cout << "UIManager initialized successfully!" << endl;
    cout << "Available models: " << m_availableModels.size() << endl;
    cout << "UI panels enabled - CategoryPanel: " << m_showCategoryPanel << ", BottomObjectList: " << m_showBottomObjectList << endl;
    
    return true;
}

void UIManager::InitializeObjectItems()
{
    // 가구 카테고리
    m_objectItems[ObjectCategory::Furniture] = {
        {"Chair", "models/chair.glb", ObjectCategory::Furniture, "thumbnails/chair.png", "편안한 의자"},
        {"Table", "models/table.glb", ObjectCategory::Furniture, "thumbnails/table.png", "작업용 책상"},
        {"Bed", "models/bed.glb", ObjectCategory::Furniture, "thumbnails/bed.png", "침대"},
        {"Shelf", "models/shelf.glb", ObjectCategory::Furniture, "thumbnails/shelf.png", "책장"},
        {"Monitor", "models/monitor.glb", ObjectCategory::Furniture, "thumbnails/monitor.png", "모니터"},
        {"Keyboard", "models/keyboard.glb", ObjectCategory::Furniture, "thumbnails/keyboard.png", "키보드"},
        {"Lamp", "models/lamp.glb", ObjectCategory::Furniture, "thumbnails/lamp.png", "전등"},
        {"Trash", "models/trash.glb", ObjectCategory::Furniture, "thumbnails/trash.png", "휴지통"},
        {"Microwave", "models/microwave.glb", ObjectCategory::Furniture, "thumbnails/microwave.png", "전자레인지"}
    };

    // 공간 카테고리
    m_objectItems[ObjectCategory::Space] = {
        {"Room 1", "models/room1.glb", ObjectCategory::Space, "thumbnails/room1.png", "기본 방"},
        {"Room 2", "models/room2.glb", ObjectCategory::Space, "thumbnails/room2.png", "넓은 방"},
        {"Room 3", "models/room3.glb", ObjectCategory::Space, "thumbnails/room3.png", "사무실"},
        {"Room 4", "models/room4.glb", ObjectCategory::Space, "thumbnails/room4.png", "거실"},
        {"Room 5", "models/room5.glb", ObjectCategory::Space, "thumbnails/room5.png", "침실"}
    };

    // 캐릭터 카테고리
    m_objectItems[ObjectCategory::Character] = {
        {"User Character", "models/character.glb", ObjectCategory::Character, "thumbnails/character.png", "사용자 캐릭터"}
    };
}

void UIManager::Shutdown()
{
    cout << "UIManager::Shutdown" << endl;
    ImGui_ImplDX11_Shutdown();
    ImGui_ImplWin32_Shutdown();
    ImGui::DestroyContext();
}

void UIManager::BeginFrame()
{
    ImGui_ImplDX11_NewFrame();
    ImGui_ImplWin32_NewFrame();
    ImGui::NewFrame();
}

void UIManager::Render()
{
    // 디버깅: ImGui가 작동하는지 확인
    static bool firstRender = true;
    if (firstRender)
    {
        cout << "UIManager::Render() called for first time" << endl;
        firstRender = false;
    }
    
    // 강제 테스트 윈도우
    ImGui::Begin("Test Window");
    ImGui::Text("Hello from ImGui!");
    ImGui::Text("If you see this, ImGui is working!");
    if (ImGui::Button("Test Button"))
    {
        cout << "Test button clicked!" << endl;
    }
    ImGui::End();
    
    if (m_showDemo)
        ImGui::ShowDemoWindow(&m_showDemo);
    
    RenderMainMenuBar();
    
    if (m_showCategoryPanel)
        RenderCategoryPanel();
        
    if (m_showBottomObjectList)
        RenderBottomObjectList();
        
    if (m_showObjectBrowser)
        RenderObjectBrowser();
        
    if (m_showSceneHierarchy)
        RenderSceneHierarchy();
        
    if (m_showInspector)
        RenderInspector();

    if (m_showCharacterPanel)
        RenderCharacterPanel();
        
    RenderStatusWindow();
}

void UIManager::EndFrame()
{
    ImGui::Render();
    ImGui_ImplDX11_RenderDrawData(ImGui::GetDrawData());
}

void UIManager::RenderMainMenuBar()
{
    if (ImGui::BeginMainMenuBar())
    {
        if (ImGui::BeginMenu("File"))
        {
            if (ImGui::MenuItem("New Scene")) {}
            if (ImGui::MenuItem("Open Scene")) {}
            if (ImGui::MenuItem("Save Scene")) {}
            ImGui::Separator();
            if (ImGui::MenuItem("Exit")) {}
            ImGui::EndMenu();
        }
        
        if (ImGui::BeginMenu("Window"))
        {
            ImGui::MenuItem("Category Panel", nullptr, &m_showCategoryPanel);
            ImGui::MenuItem("Bottom Object List", nullptr, &m_showBottomObjectList);
            ImGui::MenuItem("Scene Hierarchy", nullptr, &m_showSceneHierarchy);
            ImGui::MenuItem("Inspector", nullptr, &m_showInspector);
            ImGui::MenuItem("Character Panel", nullptr, &m_showCharacterPanel);
            ImGui::Separator();
            ImGui::MenuItem("Classic Object Browser", nullptr, &m_showObjectBrowser);
            ImGui::MenuItem("ImGui Demo", nullptr, &m_showDemo);
            ImGui::EndMenu();
        }
        
        ImGui::Text("Objects: %d", (int)m_sceneObjects.size());
        
        ImGui::EndMainMenuBar();
    }
}

void UIManager::RenderCategoryPanel()
{
    // 좌측 패널 설정
    ImGuiIO& io = ImGui::GetIO();
    ImGui::SetNextWindowPos(ImVec2(0, 25), ImGuiCond_Always);
    ImGui::SetNextWindowSize(ImVec2(CATEGORY_PANEL_WIDTH, io.DisplaySize.y - 25 - BOTTOM_PANEL_HEIGHT), ImGuiCond_Always);
    
    ImGui::Begin("Categories", &m_showCategoryPanel, 
        ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoCollapse);
    
    ImGui::Text("카테고리");
    ImGui::Separator();
    
    RenderCategoryButton(ObjectCategory::Furniture, "Furniture", "가구");
    RenderCategoryButton(ObjectCategory::Space, "Space", "공간");
    RenderCategoryButton(ObjectCategory::Character, "Character", "캐릭터");
    
    ImGui::End();
}

void UIManager::RenderCategoryButton(ObjectCategory category, const string& name, const string& koreanName)
{
    bool isSelected = (m_selectedCategory == category);
    
    if (isSelected)
    {
        ImGui::PushStyleColor(ImGuiCol_Button, ImVec4(0.2f, 0.6f, 0.9f, 1.0f));
        ImGui::PushStyleColor(ImGuiCol_ButtonHovered, ImVec4(0.3f, 0.7f, 1.0f, 1.0f));
        ImGui::PushStyleColor(ImGuiCol_ButtonActive, ImVec4(0.1f, 0.5f, 0.8f, 1.0f));
    }
    
    if (ImGui::Button(koreanName.c_str(), ImVec2(-1, 40)))
    {
        m_selectedCategory = category;
        cout << "Category selected: " << name << endl;
    }
    
    if (isSelected)
    {
        ImGui::PopStyleColor(3);
    }
}

void UIManager::RenderBottomObjectList()
{
    // 하단 패널 설정
    ImGuiIO& io = ImGui::GetIO();
    ImGui::SetNextWindowPos(ImVec2(0, io.DisplaySize.y - BOTTOM_PANEL_HEIGHT), ImGuiCond_Always);
    ImGui::SetNextWindowSize(ImVec2(io.DisplaySize.x, BOTTOM_PANEL_HEIGHT), ImGuiCond_Always);
    
    ImGui::Begin("Object List", &m_showBottomObjectList, 
        ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoCollapse);
    
    // 선택된 카테고리의 오브젝트들 표시
    auto it = m_objectItems.find(m_selectedCategory);
    if (it != m_objectItems.end())
    {
        const auto& items = it->second;
        
        // 수평 스크롤 활성화
        ImGui::BeginChild("ObjectScrollArea", ImVec2(0, -1), false, ImGuiWindowFlags_HorizontalScrollbar);
        
        float availableWidth = ImGui::GetContentRegionAvail().x;
        int itemsPerRow = max(1, (int)(availableWidth / (OBJECT_ITEM_SIZE + 10.0f)));
        
        for (size_t i = 0; i < items.size(); ++i)
        {
            if (i > 0 && (i % itemsPerRow) != 0)
            {
                ImGui::SameLine();
            }
            
            RenderObjectItem(items[i], OBJECT_ITEM_SIZE);
        }
        
        ImGui::EndChild();
    }
    
    ImGui::End();
}

void UIManager::RenderObjectItem(const ObjectItem& item, float itemWidth)
{
    ImGui::BeginGroup();
    
    // 아이템 버튼 (이미지 대신 색상 사각형)
    ImVec4 buttonColor;
    switch (item.category)
    {
        case ObjectCategory::Furniture:
            buttonColor = ImVec4(0.8f, 0.6f, 0.4f, 1.0f);
            break;
        case ObjectCategory::Space:
            buttonColor = ImVec4(0.4f, 0.8f, 0.6f, 1.0f);
            break;
        case ObjectCategory::Character:
            buttonColor = ImVec4(0.6f, 0.4f, 0.8f, 1.0f);
            break;
        default:
            buttonColor = ImVec4(0.7f, 0.7f, 0.7f, 1.0f);
            break;
    }
    
    ImGui::PushStyleColor(ImGuiCol_Button, buttonColor);
    ImGui::PushStyleColor(ImGuiCol_ButtonHovered, ImVec4(buttonColor.x * 1.2f, buttonColor.y * 1.2f, buttonColor.z * 1.2f, 1.0f));
    ImGui::PushStyleColor(ImGuiCol_ButtonActive, ImVec4(buttonColor.x * 0.8f, buttonColor.y * 0.8f, buttonColor.z * 0.8f, 1.0f));
    
    if (ImGui::Button(("##" + item.name).c_str(), ImVec2(itemWidth, itemWidth * 0.7f)))
    {
        cout << "Object item clicked: " << item.name << endl;
        
        if (item.category == ObjectCategory::Character)
        {
            if (m_onCharacterSpawn)
            {
                m_onCharacterSpawn(item.name);
            }
        }
        else
        {
            if (m_onModelSpawn)
            {
                m_onModelSpawn(item.name);
            }
        }
    }
    
    ImGui::PopStyleColor(3);
    
    // 아이템 이름
    ImGui::PushTextWrapPos(ImGui::GetCursorPos().x + itemWidth);
    ImGui::Text("%s", item.name.c_str());
    ImGui::PopTextWrapPos();
    
    if (ImGui::IsItemHovered())
    {
        ImGui::BeginTooltip();
        ImGui::Text("%s", item.description.c_str());
        ImGui::EndTooltip();
    }
    
    ImGui::EndGroup();
}

void UIManager::RenderObjectBrowser()
{
    ImGui::SetNextWindowPos(ImVec2(10, 30), ImGuiCond_FirstUseEver);
    ImGui::SetNextWindowSize(ImVec2(250, 300), ImGuiCond_FirstUseEver);
    
    ImGui::Begin("Object Browser", &m_showObjectBrowser);
    
    ImGui::Text("Available Models:");
    ImGui::Separator();
    
    if (m_availableModels.empty())
    {
        ImGui::Text("No models found in asset/models/");
        ImGui::Text("Place .glb or .gltf files there");
    }
    else
    {
        for (const auto& modelName : m_availableModels)
        {
            if (ImGui::Button(modelName.c_str(), ImVec2(-1, 0)))
            {
                cout << "Button clicked: " << modelName << endl;
                if (m_onModelSpawn)
                {
                    m_onModelSpawn(modelName);
                }
                else
                {
                    cout << "m_onModelSpawn callback is null!" << endl;
                }
            }
            
            if (ImGui::IsItemHovered())
            {
                ImGui::SetTooltip("Click to add to scene");
            }
        }
    }
    
    ImGui::End();
}

void UIManager::RenderSceneHierarchy()
{
    ImGuiIO& io = ImGui::GetIO();
    ImGui::SetNextWindowPos(ImVec2(io.DisplaySize.x - 300, 25), ImGuiCond_FirstUseEver);
    ImGui::SetNextWindowSize(ImVec2(300, 250), ImGuiCond_FirstUseEver);
    
    ImGui::Begin("Scene Hierarchy", &m_showSceneHierarchy);
    
    ImGui::Text("Scene Objects (%d):", (int)m_sceneObjects.size());
    ImGui::Separator();
    
    if (m_sceneObjects.empty())
    {
        ImGui::Text("No objects in scene");
        ImGui::Text("Add objects from categories");
    }
    else
    {
        for (auto& obj : m_sceneObjects)
        {
            if (!obj) continue;
            
            bool isSelected = (obj == m_selectedObject);
            
            if (isSelected)
            {
                ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(1.0f, 1.0f, 0.0f, 1.0f));
            }
            
            if (ImGui::Selectable(obj->GetObjectID().c_str(), isSelected))
            {
                cout << "Object selected in hierarchy: " << obj->GetObjectID() << endl;
                
                if (m_selectedObject)
                {
                    m_selectedObject->SetSelected(false);
                }
                
                m_selectedObject = obj;
                obj->SetSelected(true);
            }
            
            if (isSelected)
            {
                ImGui::PopStyleColor();
            }
            
            if (ImGui::BeginPopupContextItem())
            {
                if (ImGui::MenuItem("Delete"))
                {
                    cout << "Delete requested for: " << obj->GetObjectID() << endl;
                    if (m_onObjectDelete)
                    {
                        m_onObjectDelete(obj);
                    }
                }
                ImGui::EndPopup();
            }
        }
    }
    
    ImGui::End();
}

void UIManager::RenderInspector()
{
    ImGuiIO& io = ImGui::GetIO();
    ImGui::SetNextWindowPos(ImVec2(io.DisplaySize.x - 300, 280), ImGuiCond_FirstUseEver);
    ImGui::SetNextWindowSize(ImVec2(300, 300), ImGuiCond_FirstUseEver);
    
    ImGui::Begin("Inspector", &m_showInspector);
    
    if (m_selectedObject)
    {
        ImGui::Text("Object: %s", m_selectedObject->GetObjectID().c_str());
        ImGui::Text("Type: %s", m_selectedObject->GetObjectType().c_str());
        ImGui::Separator();
        
        if (ImGui::CollapsingHeader("Transform", ImGuiTreeNodeFlags_DefaultOpen))
        {
            auto transform = m_selectedObject->GetTransform();
            
            Vector3 pos = transform->GetPosition();
            Vector3 rot = transform->GetRotation();
            Vector3 scale = transform->GetScale();
            
            if (ImGui::DragFloat3("Position", &pos.x, 0.1f))
            {
                transform->SetPosition(pos);
            }
            
            if (ImGui::DragFloat3("Rotation", &rot.x, 1.0f))
            {
                transform->SetRotation(rot);
            }
            
            if (ImGui::DragFloat3("Scale", &scale.x, 0.1f, 0.1f, 10.0f))
            {
                transform->SetScale(scale);
            }
        }
        
        if (ImGui::CollapsingHeader("Object Info"))
        {
            ImGui::Text("Selected: %s", m_selectedObject->IsSelected() ? "Yes" : "No");
            ImGui::Text("Picked Up: %s", m_selectedObject->IsPickedUp() ? "Yes" : "No");
        }
    }
    else
    {
        ImGui::Text("No object selected");
        ImGui::Separator();
        ImGui::Text("Click on an object in the scene");
        ImGui::Text("or select from Scene Hierarchy");
    }
    
    ImGui::End();
}

void UIManager::RenderCharacterPanel()
{
    ImGuiIO& io = ImGui::GetIO();
    ImGui::SetNextWindowPos(ImVec2(CATEGORY_PANEL_WIDTH + 10, 25), ImGuiCond_FirstUseEver);
    ImGui::SetNextWindowSize(ImVec2(250, 200), ImGuiCond_FirstUseEver);
    
    ImGui::Begin("Character Control", &m_showCharacterPanel);
    
    if (m_character)
    {
        ImGui::Text("Character Status");
        ImGui::Separator();
        
        Vector3 pos = m_character->GetPosition();
        Vector3 rot = m_character->GetRotation();
        
        ImGui::Text("Position: %.2f, %.2f, %.2f", pos.x, pos.y, pos.z);
        ImGui::Text("Rotation: %.1f degrees", rot.y);
        
        CharacterState state = m_character->GetState();
        const char* stateNames[] = { "Idle", "Walking", "Running", "Interacting" };
        ImGui::Text("State: %s", stateNames[(int)state]);
        
        ImGui::Separator();
        ImGui::Text("Controls:");
        ImGui::Text("WASD - Move");
        ImGui::Text("Mouse - Look around");
        ImGui::Text("Shift - Run");
        
        if (ImGui::Button("Reset Position"))
        {
            m_character->SetPosition(Vector3(0.0f, 0.1f, 0.0f));
            m_character->SetRotation(Vector3(0.0f, 0.0f, 0.0f));
        }
    }
    else
    {
        ImGui::Text("No character in scene");
        ImGui::Text("Add character from Character category");
    }
    
    ImGui::End();
}

void UIManager::RenderStatusWindow()
{
    ImGuiIO& io = ImGui::GetIO();
    ImGui::SetNextWindowPos(ImVec2(CATEGORY_PANEL_WIDTH + 270, 25), ImGuiCond_FirstUseEver);
    ImGui::SetNextWindowSize(ImVec2(200, 150), ImGuiCond_FirstUseEver);
    
    ImGui::Begin("Status");
    
    ImGui::Text("Application Status:");
    ImGui::Separator();
    ImGui::Text("Scene Objects: %d", (int)m_sceneObjects.size());
    ImGui::Text("Available Models: %d", (int)m_availableModels.size());
    ImGui::Text("Selected Object: %s", 
        m_selectedObject ? m_selectedObject->GetObjectID().c_str() : "None");
    ImGui::Text("Character: %s", m_character ? "Active" : "None");
    
    ImGui::Separator();
    ImGui::Text("Selected Category:");
    const char* categoryNames[] = { "Furniture", "Space", "Character", "Lighting", "Decoration" };
    ImGui::Text("%s", categoryNames[(int)m_selectedCategory]);
    
    ImGui::End();
}

void UIManager::UpdateObjectList(const vector<shared_ptr<InteriorObject>>& objects)
{
    m_sceneObjects = objects;
}

void UIManager::SetSelectedObject(shared_ptr<InteriorObject> object)
{
    if (m_selectedObject)
    {
        m_selectedObject->SetSelected(false);
    }
    
    m_selectedObject = object;
    
    if (m_selectedObject)
    {
        m_selectedObject->SetSelected(true);
    }
}

} // namespace visualnnz