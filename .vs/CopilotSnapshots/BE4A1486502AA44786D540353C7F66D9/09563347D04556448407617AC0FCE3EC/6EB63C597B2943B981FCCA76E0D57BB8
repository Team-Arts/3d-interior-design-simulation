#pragma once

#include <DirectXTK/SimpleMath.h>
#include <memory>
#include <string>
#include <d3d11.h>
#include <wrl.h>

namespace visualnnz
{
using DirectX::SimpleMath::Vector3;
using DirectX::SimpleMath::Matrix;
using Microsoft::WRL::ComPtr;
using std::unique_ptr;
using std::string;

class Transform;
class MeshRenderer;
class Camera;

enum class CharacterState
{
    Idle,
    Walking,
    Running,
    Interacting
};

class Character
{
public:
    Character();
    ~Character();

    bool Initialize(ComPtr<ID3D11Device> device, const string& modelPath = "");
    void Update(float deltaTime);
    void Render(ComPtr<ID3D11DeviceContext> context, const Camera& camera);

    // 위치 및 이동
    void SetPosition(const Vector3& position);
    Vector3 GetPosition() const;
    
    // 회전
    void SetRotation(const Vector3& rotation);
    Vector3 GetRotation() const;
    
    // 이동 제어
    void MoveForward(float distance);
    void MoveRight(float distance);
    void Turn(float angle);
    
    // 상태 관리
    void SetState(CharacterState state);
    CharacterState GetState() const;
    
    // 애니메이션 속도
    void SetMovementSpeed(float speed) { m_movementSpeed = speed; }
    float GetMovementSpeed() const { return m_movementSpeed; }
    
    // Transform 컴포넌트 접근
    Transform* GetTransform() const { return m_transform.get(); }
    
    // 충돌 관련
    float GetRadius() const { return m_collisionRadius; }
    void SetCollisionRadius(float radius) { m_collisionRadius = radius; }

private:
    void UpdateMovement(float deltaTime);
    void UpdateAnimation(float deltaTime);

    unique_ptr<Transform> m_transform;
    unique_ptr<MeshRenderer> m_meshRenderer;
    
    CharacterState m_currentState;
    float m_movementSpeed;
    float m_rotationSpeed;
    float m_collisionRadius;
    
    // 애니메이션 관련
    float m_animationTime;
    float m_walkCycleSpeed;
};

} // namespace visualnnz