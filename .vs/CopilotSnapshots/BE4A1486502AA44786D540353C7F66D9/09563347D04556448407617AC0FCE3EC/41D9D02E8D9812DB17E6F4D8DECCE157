#pragma once

#include <memory>
#include <vector>
#include <directxtk/SimpleMath.h>

#include "AppBase.h"

namespace visualnnz
{
using DirectX::SimpleMath::Vector3;
using std::unique_ptr;
using std::shared_ptr;
using std::vector;
using std::wstring;
using std::string;

// 전방 선언
class Renderer;
class InteriorObject;
class Mesh;
class Shader;

// AppBase를 상속받아 실제 프로그램 로직을 정의하는 클래스
class MainApp : public AppBase
{
public:
    MainApp();
    virtual ~MainApp() override;

    // AppBase 순수 가상 함수 오버라이드
    virtual bool Initialize(HINSTANCE hInstance, int nCmdShow) override;
    virtual void Update(float deltaTime) override;
    virtual void Render() override;

protected:
    // AppBase에서 요구하는 순수 가상 함수들 구현
    virtual bool InitializeGraphics() override;
    virtual void CreateTestObjects() override;
    virtual void InitializeManagers() override;

    // 이벤트 핸들러 오버라이드 (필요한 것만)
    virtual void OnModelSpawn(const string& modelName) override;
    virtual void OnCharacterSpawn(const string& characterName) override;

private:
    // MainApp 전용 멤버들
    unique_ptr<Renderer> m_renderer;

    // 테스트 오브젝트들
    unique_ptr<InteriorObject> m_testCube;
    shared_ptr<Mesh> m_cubeMesh;
    shared_ptr<Shader> m_basicShader;

    // 오브젝트 생성 헬퍼 함수들
    shared_ptr<InteriorObject> CreateTestObject(const string& objectId, const string& objectType, const Vector3& position);
};

} // namespace visualnnz
